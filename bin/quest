#!/usr/bin/env ruby

#
# Usage: quest [file]
#
# Input: a file that contains a description of how to find treasure (a quest)
#
# The file contains a list of NPCs, the instructions they work under, and the
# treasure related to that instruction.
#
# Quest description file looks like:
#  npc [treasure list]
#
#  generous "gold"
#  stingy
#  greedy "silver"
#  shopkeeper "gold", "sword"
#
# Output: treasure as a result of the quest
#
#
# User Story 1:
# A user is able to classify all nodes the same way. E.g. all nodes will result
# in the same list of classes.
#
# Given a node node1 and a node node2
# When the quest is:
#  generous "classification1"
#  generous "classification2"
# Then both node1 and node2 have the same classification of ["classification1", "classification2"]
#
# User Story 2:
# A user can change the classification of a particular node based on the name
# of that node.
# Given a node node1 with facts { :name => "bob" } and node2 with facts { :name => "frank" }
# When the quest is:
#  generous "classification1"
#  generous "classification2", :when => has(:name, "bob")
#  generous "classification3", :when => has(:name, aint("bob"))
# Then node1 has a classification of ["classification1", "classification2"]
# And node2 has a classification of ["classification1", "classification3"]
#
# User Story 3:
# A user can use other data available about the node to control the
# classification of the node.
# Given a node node1 with facts { :name => "bob", :age => 70 }
# And a node node2 with facts { :name => "frank", :age => 25 }
# When the quest is:
#  generous "classification1"
#  generous "old", :when => has(:age, greater_than(40))
#  generous "young", :when => has(:age, less_than(40))
# Then node1 has a classification of ["classification1", "old"]
# And node2 has a classification of ["classification1", "young"]
#
# User Story 4:
# A user can create a classification that not only adds, but also removes
# classifications based on information about the node
# Given a node node1 with facts { :age => 70 }
# And a node node2 with facts { :age => 25 }
# When the quest is:
#  generous "classification1"
#  generous "workforce"
#  shopkeeper "workforce", "retired", :when => has(:age, greater_than(65))
# Then node1 has a classification of ["classification1", "retired"]
# And node2 has a classification of ["classification1", "workforce"]
#
# User Story 5:
# A dungeon master of a quest is able to control what allowed outputs of the
# quest can be. E.g. an ENC sending a node on a quest can declare that it must
# contain an "environment" treasure that is a single string, "classes" that is
# a hash of names to a hash of parameters, and "parameters" which is a hash of
# a name to a value.
#

require 'yaml'
require 'character'
require 'quest'
require 'npc'
require 'checks'

quest_description_filename = ARGV[0]

class QuestFile
  include Checks

  def self.read(filename)
    questfile = QuestFile.new()
    questfile.send(:instance_eval, File.read(filename))
    Quest.new(*questfile.npcs)
  end

  attr_reader :npcs

  def initialize
    @npcs = []
  end

  def generous(treasure, matcher_hash = {})
    @npcs << Npc.generous(treasure, matcher_hash)
  end

  def greedy(treasure, matcher_hash = {})
    @npcs << Npc.greedy(treasure, matcher_hash)
  end

  def stingy()
    @npcs << Npc.stingy()
  end

  def shopkeeper(takes, gives, matcher_hash = {})
    @npcs << Npc.shopkeeper(takes, gives, matcher_hash)
  end

end

quest = QuestFile.read(quest_description_filename)
bob = Character.new 'bob', :age => 70
frank = Character.new 'frank', :age => 25

require 'pp'
puts "bob's bag has\t" + bob.go_on(quest).to_s
puts "frank's bag has\t" + frank.go_on(quest).to_s


